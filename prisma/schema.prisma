// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Paciente {
    id                        String        @id @default(cuid())
    nombre                    String
    apellidoPaterno           String
    apellidoMaterno           String
    fechaNacimiento           DateTime
    curp                      String
    nss                       String
    genero                    String
    padecimientosHereditarios String
    consultas                 Consulta[] // Relaci贸n uno a muchos
    medicamentos              Medicamento[] // Relaci贸n uno a muchos
    enfermedades              Enfermedad[] // Relaci贸n uno a muchos
}

model Consulta {
    id             String   @id @default(cuid())
    paciente       Paciente @relation(fields: [idPaciente], references: [id])
    idPaciente     String
    doctor         User     @relation(fields: [idDoctor], references: [id])
    idDoctor       String
    fechaConsulta  DateTime
    motivoConsulta String
    diagnostico    String
    tratamiento    String
    proximaCita    DateTime

    @@index([idPaciente])
    @@index([idDoctor])
}

model Medicamento {
    id             String   @id @default(cuid())
    paciente       Paciente @relation(fields: [idPaciente], references: [id])
    idPaciente     String
    nombre         String
    descripcion    String
    dosis          String
    indicaciones   String
    fechaCaducidad DateTime

    @@index([idPaciente])
}

model Enfermedad {
    id          String   @id @default(cuid())
    paciente    Paciente @relation(fields: [idPaciente], references: [id])
    idPaciente  String
    nombre      String
    descripcion String
    sintomas    String
    tratamiento String

    @@index([idPaciente])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String     @id @default(cuid())
    nombre          String?
    apellidoPaterno String
    apellidoMaterno String
    password        String
    curp            String     @unique
    especialidad    String
    email           String?    @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    consultas       Consulta[] // Relaci贸n uno a muchos
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
